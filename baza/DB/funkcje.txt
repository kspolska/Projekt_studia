
Finkcja aktualizując dane na tak

    UPDATE wyniki SET  wynik_tak = 
	(SELECT count(glos_tak) FROM glosy
 where 
	 wyniki.ustawa = glosy.ustawa
	 and
	glos_tak=True);
	
	
	Finkcja aktualizując dane na nie
	
	    UPDATE wyniki SET  wynik_nie = 
	(SELECT count(glos_nie) FROM glosy
 where 
	 wyniki.ustawa = glosy.ustawa
	and
	glos_nie=True);
	
	
		Finkcja aktualizując dane na wstrzymany
	
	    UPDATE wyniki SET  wynik_wstrzymany = 
	(SELECT count(glos_wstrzymany) FROM glosy
 where 
	 wyniki.ustawa = glosy.ustawa
	and
	glos_wstrzymany=True);
	
	
	
	CREATE FUNCTION merge_db_tak(ustawa INT, glos INT) RETURNS VOID AS
$$
BEGIN
    LOOP
        -- first try to update the ustawa
        -- note that "a" must be unique
        UPDATE wyniki SET  wynik_tak = 
	(SELECT count(glos_tak) FROM glosy where wyniki.ustawa = glosy.ustawa and glos_tak=True);
        IF found THEN
            RETURN;
        END IF;
        -- not there, so try to insert the ustawa
        -- if someone else inserts the same ustawa concurrently,
        -- we could get a unique-ustawa failure
        BEGIN
            INSERT INTO wyniki(ustawa,glos_tak,glos_nie,glos_wstrzymany) VALUES (ustawa, glos, 0,0);
            RETURN;
        EXCEPTION WHEN unique_violation THEN
            -- do nothing, and loop to try the UPDATE again
        END;
    END LOOP;
END;
$$
LANGUAGE plpgsql;


python manage.py runserver